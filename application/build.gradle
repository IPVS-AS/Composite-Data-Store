buildscript {
    ext {
        springBootVersion = '2.1.3.RELEASE'
        gradlePluginVersion = '0.21.0'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${gradlePluginVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

group = 'de.uni.sttg.ipvs.as.composite.data.store'
archivesBaseName = 'compositedatastore'
version = '1.0.0.RELEASE'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

test {
    systemProperty 'spring.profiles.active', 'test'
}

dependencies {

    compile project(':domain')
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.1.3.RELEASE'
    //compile("org.springframework.cloud:spring-cloud-starter:1.2.6.RELEASE")
    //compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.1.3.RELEASE'
    //compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-eureka', version: '1.4.6.RELEASE'

    // Lombok
    compileOnly "org.projectlombok:lombok:1.16.20"
    annotationProcessor "org.projectlombok:lombok:1.16.20"

    //Adapter MongoDB
    compile 'org.mongodb:mongo-java-driver:2.13.3'
    compile 'org.mongodb:bson:2.13.3'

    //RabbitMQ
    compile group: 'com.rabbitmq', name: 'amqp-client', version: '5.4.3'

    //MySQL
    compile 'mysql:mysql-connector-java'

    //Redis
    compile group: 'redis.clients', name: 'jedis', version: '3.0.1'


}

docker {
    name 'compositedatastore'
    tags 'latest' // deprecated, use 'tag'
    dockerfile file('./Dockerfile')
    files 'build/'
    copySpec.into("build/")
    //copySpec.from("src/main/resources/").into("src/main/resources/")
}

